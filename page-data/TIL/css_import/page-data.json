{"componentChunkName":"component---src-templates-blog-post-js","path":"/TIL/css_import/","result":{"data":{"site":{"siteMetadata":{"title":"42Log"}},"markdownRemark":{"id":"c990bd9c-d145-5957-9dbb-9c08e99b7bf0","excerpt":"프로젝트에서 페이지 별 CSS 파일에 공통 요소를 적용하기 위해 를 사용해 default.css 파일을 불러오려고 했다. 그러다 궁금한 점이 생겼다. a.css 파일 안에 b.css 파일을 import 하는 방식과, HTML 파일에  태그를 사용하여  a.css 파일과 b.css…","html":"<p>프로젝트에서 페이지 별 CSS 파일에 공통 요소를 적용하기 위해 <code class=\"language-text\">@import</code>를 사용해 default.css 파일을 불러오려고 했다. 그러다 궁금한 점이 생겼다. a.css 파일 안에 b.css 파일을 import 하는 방식과, HTML 파일에 <code class=\"language-text\">&lt;link&gt;</code> 태그를 사용하여  a.css 파일과 b.css 파일을 모두 불러오는 방식의 차이는 뭘까? 조금 오래된 글이긴 하지만 각각의 차이를 설명한 글이 있어서 읽고 정리해본다. <a href=\"https://www.stevesouders.com/blog/2009/04/09/dont-use-import/\">👉원문 보기</a>  </p>\n<p>결론을 먼저 말하자면, <code class=\"language-text\">@import</code>를 사용하지 말고 <code class=\"language-text\">&lt;link&gt;</code> 태그를 사용하라는 것. 그 이유를 살펴보자.</p>\n<h4>HTML 파일에 CSS 파일을 불러오는 방법</h4>\n<p>먼저 HTML 파일에 CSS 파일을 불러오는 방법은 크게 두 가지로 나뉜다.</p>\n<p>첫 번째는 HTML link 태그를 사용하는 방법,</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>stylesheet<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>a.css<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>두 번째는 HTML style 태그 내부에 @import를 사용하는 방법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'a.css'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>이 두 가지 방법을 전제로 link 태그와 @import를 다양한 방식으로 조합하여 사용할 때의 차이점을 살펴본다.</p>\n<h4>[1] @import &#x26; @import</h4>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'a.css'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'b.css'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>&#x3C;style> 태그 내부에 @import를 각각 사용하여 a.css와 b.css를 불러오는 방식이다. 이 경우, 페이지가 요청되면 두 css 파일은 병렬적(parallel)으로 다운로드 된다. 즉 성능적으로 손해를 보지 않는다.</p>\n<h4>[2] &#x3C;link> &#x26; @import</h4>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>stylesheet<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>text/css<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>a.css<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'b.css'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>&#x3C;link> 태그와 @import를 섞어서 쓰는 경우, 두 파일은 순차적(sequentially)으로 다운로드 된다. (원문의 테스트는 IE 6, 7, 8을 기준으로 진행되었다) 따라서 두 파일을 동시에 다운로드 하는 [1]번 방식보다 시간적으로 손해를 보게 된다. </p>\n<h4>[3] @import in &#x3C;link></h4>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- in the HTML document --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>stylesheet<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>text/css<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>a.css<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- in a.css --></span>\n@import url('b.css');</code></pre></div>\n<p>이번엔 내가 시도하려던 방식이다. link 태그로 a.css 파일을 불러오는데 a.css 파일 내부에 @import를 사용해 b.css 파일을 포함시킨 방식이다.</p>\n<p>이 경우 [2]번과 마찬가지로 파일을 순차적으로 다운로드 한다. (모든 브라우저에서 그렇다고 한다..) 사실 논리적으로 생각해보면 당연한 일이다. 브라우저는 a.css를 우선 다운로드 한 뒤, parse 하는 과정에서 a.css가 b.css를 import 한다는 사실을 알게되어 그제야 b.css를 다운받기 시작할 테니까.</p>\n<p>나는 가장 성능이 안 좋은 방식을 사용하려고 한 것이다.</p>\n<h4>[4] &#x3C;link> &#x26; &#x3C;link></h4>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>stylesheet<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>text/css<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>a.css<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>stylesheet<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>text/css<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>b.css<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>&#x3C;link> 태그를 여러 개 사용하여 각 파일을 불러오는 방식이다.  &#x3C;link> 태그를 사용하면 모든 브라우저에서 파일을 병렬적으로 다운로드 한다. 또한 &#x3C;link> 태그를 사용하면 파일의 다운로드 순서를 보장받을 수 있다. ([1]번처럼 다수의 @import를 사용하는 경우 브라우저 및 상황에따라 다운로드 순서가 보장되지 않는 경우도 있다고 한다)</p>\n<h4>결론</h4>\n<p>@import를 사용하면 경우에 따라 시간적으로 손해를 볼 여지가 있다. 특히 IE에서는 다운로드 순서를 보장 받지 못하여, &#x3C;link>와 @import를 섞어 쓰면 다운로드 시간이 오래 걸리는 파일을 다운받는 동안 다른 파일들이 블록되어 더 많은 시간이 소비되는 경우도 발생한다.</p>\n<p><strong>&#x3C;link></strong> 를 사용하자. </p>","frontmatter":{"title":"[TIL] <link>와 @import","date":"June 04, 2021","description":null}},"previous":{"fields":{"slug":"/TIL/http_cookie&session/"},"frontmatter":{"title":"[TIL] HTTP Cookie와 Session"}},"next":{"fields":{"slug":"/TIL/js_objecttype/"},"frontmatter":{"title":"[TIL] 원시 값과 객체의 복사"}}},"pageContext":{"id":"c990bd9c-d145-5957-9dbb-9c08e99b7bf0","previousPostId":"072ac177-b12a-51a4-a54a-70564a30ad5b","nextPostId":"f0cea028-c743-5e38-85bd-4404058a0207"}},"staticQueryHashes":["2841359383","3257411868"]}