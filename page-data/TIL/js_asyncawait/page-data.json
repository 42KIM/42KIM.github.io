{"componentChunkName":"component---src-templates-blog-post-js","path":"/TIL/js_asyncawait/","result":{"data":{"site":{"siteMetadata":{"title":"42Log"}},"markdownRemark":{"id":"d9758d6c-3281-52c1-b1eb-15abf02173c0","excerpt":"이전 글에서 프로미스의 한계를 보완하기 위해 ES8에서 도입된 것이 라고 했다. async/await를 사용하면 프로미스의 후속 처리 메서드보다 간단하고 가독성 좋게 비동기 처리를 수행할 수 있고, 동기 처리처럼 동작하도록 구현할 수 있다. async/await…","html":"<p><a href=\"https://42kim.github.io/TIL/js_promise/\">이전 글</a>에서 프로미스의 한계를 보완하기 위해 ES8에서 도입된 것이 <code class=\"language-text\">async/await</code>라고 했다.</p>\n<p>async/await를 사용하면 프로미스의 후속 처리 메서드보다 간단하고 가독성 좋게 비동기 처리를 수행할 수 있고, 동기 처리처럼 동작하도록 구현할 수 있다.</p>\n<h3>async/await 사용법</h3>\n<ul>\n<li><code class=\"language-text\">async</code>는 function 앞에 위치한다.<br>\nasync가 붙은 함수는 <strong>언제나 프로미스를 반환</strong>한다. 프로미스가 아닌 값을 반환하더라도 암묵적으로 resolved 프로미스로 감싸 반환한다.</li>\n<li><code class=\"language-text\">await</code>는 <strong>async 함수 안에서만</strong> 사용할 수 있다.<br>\n프로미스 앞에 await를 붙이면 자바스크립트는 해당 프로미스가 처리될 때까지 기다린다. 그리고 처리가 완료되면 resolve 결과가 반환된다.</li>\n<li>\n<p>예시</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>첫 번째 프로미스는 3초가 흐른 후 변수 a에 1을 할당한다.</p>\n<p>이어서 2초가 흐른 후 변수 b에 2를 할당하고,</p>\n<p>다시 1초가 흐른 후 변수 c에 3을 할당하여 약 6초가 소요된다.</p>\n<p>위의 예시는 3개의 비동기 처리를 동기 처리처럼 수행한다.</p>\n<p>만약 서로 관련이 없어서 순차적으로 처리할 필요가 없는 비동기 처리들은 <code class=\"language-text\">Promise.all</code>을 사용하려 불필요한 소요시간을 줄일 수 있다 <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\">👉Promise.all 설명</a></p>\n</li>\n</ul>\n<h3>async/await의 에러 핸들링</h3>\n<p>비동기 함수의 콜백 함수를 호출하는 방식은 try..catch문을 사용해 에러를 캐치할 수 없었다. 그러나 async 함수 내부에서 try..catch문을 사용하면 에러를 정상적으로 캐치할 수 있다.</p>\n<p>만약 async 함수 내부에서 try..catch문을 사용하지 않았는데 에러가 발생하면, async 함수는 에러를 reject하는 프로미스를 반환한다. 따라서 이를 처리해줄 프로미스 후속 처리 메서드 <code class=\"language-text\">.catch</code>를 사용하여 에러 핸들링을 해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// async 함수 foo</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>일반 함수 내부에서 async 함수를 호출하는 경우</h3>\n<p>일반 함수 내부에서는 await를 사용할 수 없는데, 어떻게 호출된 async 함수의 결과 값을 사용할 수 있을까.</p>\n<p>async 함수가 언제나 <strong>프로미스를 반환</strong>한다는 사실을 기억하면 된다. 따라서 프로미스 후속 처리 메서드를 사용하면 결과를 처리할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// shows 10 after 1 second</span>\n  <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>참고</h4>\n<p><a href=\"https://ko.javascript.info/\">모던 JavaScript 튜토리얼</a><br>\n<a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\">MDN Web Docs</a><br>\n모던 자바스크립트 Deep Dive | 위키북스 | 이웅모  </p>","frontmatter":{"title":"[TIL] async/await","date":"May 31, 2021","description":null}},"previous":{"fields":{"slug":"/TIL/js_promise/"},"frontmatter":{"title":"[TIL] Promise"}},"next":{"fields":{"slug":"/TIL/http_cookie&session/"},"frontmatter":{"title":"[TIL] HTTP Cookie와 Session"}}},"pageContext":{"id":"d9758d6c-3281-52c1-b1eb-15abf02173c0","previousPostId":"52c49748-d276-52c1-8748-bad627d6ffa2","nextPostId":"072ac177-b12a-51a4-a54a-70564a30ad5b"}},"staticQueryHashes":["2841359383","3257411868"]}