{"componentChunkName":"component---src-templates-blog-post-js","path":"/tutorials/Node.js+MySQL/","result":{"data":{"site":{"siteMetadata":{"title":"42Log"}},"markdownRemark":{"id":"9e700b70-7527-5bc8-926e-1a1188e04f48","excerpt":"프로젝트에서 회원가입 기능을 구현하는 단계에 돌입했다. 신규 유저로부터 입력받은 회원정보를 보관하고 관리하기 위해 을 에 연동해야 했다. 이 과정을 간단하게 설명하고, 익숙치 않은 SQL 문을 기억해두기 위해 자주 사용하는 내용을 정리해둔다. Node.js에 MySQL…","html":"<p>프로젝트에서 회원가입 기능을 구현하는 단계에 돌입했다. 신규 유저로부터 입력받은 회원정보를 보관하고 관리하기 위해 <code class=\"language-text\">MySQL</code>을 <code class=\"language-text\">Node.js</code>에 연동해야 했다. 이 과정을 간단하게 설명하고, 익숙치 않은 SQL 문을 기억해두기 위해 자주 사용하는 내용을 정리해둔다.</p>\n<h3>Node.js에 MySQL 연동하기</h3>\n<p>먼저 <code class=\"language-text\">npm</code>을 통해 <a href=\"https://www.npmjs.com/package/mysql\"><code class=\"language-text\">mysql</code></a> 모듈을 설치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">$ npm install mysql</code></pre></div>\n<p>MySQL 서버에 애플리케이션을 연결하는 방법은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> mysql <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mysql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">.</span><span class=\"token function\">createConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// MySQL 서버의 위치</span>\n    <span class=\"token comment\">// MySQL User ID</span>\n    <span class=\"token comment\">// MySQL PASSWORD</span>\n    <span class=\"token comment\">// 사용할 DATABASE 명</span>\n  \thost     <span class=\"token operator\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n  \tuser     <span class=\"token operator\">:</span> <span class=\"token string\">'me'</span><span class=\"token punctuation\">,</span>\n\tpassword <span class=\"token operator\">:</span> <span class=\"token string\">'secret'</span><span class=\"token punctuation\">,</span>\n  \tdatabase <span class=\"token operator\">:</span> <span class=\"token string\">'my_db'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// MySQL 서버 접속</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// DB에 Query 날리기</span>\ndb<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT 1 + 1 AS solution'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">,</span> fields</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The solution is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>solution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// MySQL 서버와의 연결 종료</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">db.query()</code>의 첫 번째 인자로는 실행할 SQL 명령어를, 두 번째 인자로는 콜백 함수가 위치한다. 콜백 함수의 첫 번째 인자로는 Query 처리 과정에서 발생하는 Error가, 두 번째 인자로는 Query의 결과가, 세 번째 인자로는 두 번째 인자의 자세한 필드 정보가 담긴다.</p>\n<h4>SQL Injection과 escape 방식</h4>\n<p>query() 메서드의 첫 번째 인자인 SQL문을 작성할 때, 주의할 점이 있다. SQL문에 데이터의 정보를 그대로 노출할 경우, <code class=\"language-text\">SQL Injection</code>이라는 해킹 기법에 취약하다. SQL Injection은 우리가 데이터베이스 서버에 날리는 query를 탈취하여 데이터를 훔치거나, 데이터베이스 전체를 삭제하는 등의 큰 문제를 일으킬 수 있다. 이 같은 피해를 방지하기 위해 query를 보호하기 위한 <code class=\"language-text\">escape</code>방식을 사용해야 한다. </p>\n<p>users 테이블에 회원의 id와 password를 저장하는 query를 날린다고 가정해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'INSERT INTO users (id, password) VALUES ('</span>abc123<span class=\"token string\">', '</span>def456<span class=\"token string\">')'</span></code></pre></div>\n<p>위와 같은 SQL문이 query() 메서드의 인자로 전달된다. 만약 이 query가 SQL Injection에 의해 탈취 당한다면, 회원 ID와 PASSWORD는 고스란히 노출될 수밖에 없다.  이를 방지하기 위해 쉽게 사용할 수 있는 escape 방식은 다음과 같은 것들이 있다.</p>\n<ul>\n<li>placeholder 사용하기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INSERT INTO users (id, password) VALUES (?, ?)'</span><span class=\"token punctuation\">,</span>\n\t     <span class=\"token punctuation\">[</span><span class=\"token string\">'my-id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'my-password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n         <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">,</span> fields</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n  \t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The solution is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>solution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>값 대신 <code class=\"language-text\">?</code>를 위치시키고, query 메서드의 다음 인자로 값이 담긴 배열을 전달하는 방식이다. 이때, 물음표와 배열 의 요소가 순서대로 대입된다는 사실에 유의하여 값을 담아야 한다. 위의 코드에서 첫 번째 물음표에는 ‘my-id’가, 두 번째 물음표에는 ‘my-password’가 대입된다.</p>\n<ul>\n<li>mysql 모듈이 제공하는 escape() 메서드 사용하기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">db<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT email FROM users WHERE id='</span> <span class=\"token operator\">+</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">escape</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc123'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">,</span> fields</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n  \t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The solution is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>solution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>SQL 문</h3>\n<p><strong>DATABASE</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"mysql\"><pre class=\"language-mysql\"><code class=\"language-mysql\">SHOW DATABASES; \t\t\t // 목록 보기\nCREATE DATABASE [DB명];\t\t// 생성하기\nUSE [DB명];\t\t\t\t\t// 사용하기</code></pre></div>\n<p><strong>TABLE</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"mysql\"><pre class=\"language-mysql\"><code class=\"language-mysql\">SHOW TABLES;\t\t\t\t\t\t\t\t\t// 목록 보기\nCREATE TABLE [테이블명] (\n[컬럼명1] [데이터 타입](사이즈) [속성1] [속성2],\n[컬럼명2] [데이터 타입](사이즈) [속성],\nPRIMARY KEY(컬럼명)\n);\t\t\t\t\t\t\t\t\t\t\t\t// 생성하기\nDESCRIBE [테이블명];\t\t\t\t\t\t\t // 정보 확인하기</code></pre></div>\n<p><strong>DATA</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"mysql\"><pre class=\"language-mysql\"><code class=\"language-mysql\">INSERT INTO [테이블명] ([컬럼명1], [컬럼명2]) VALUES (&#39;값1&#39;, &#39;값2&#39;);\t// 데이터 추가하기\n\nSELECT * FROM [테이블명];\t\t\t\t\t\t\t\t\t // 테이블의 모든 데이터 출력\nSELECT [컬럼명] FROM [테이블명];\t\t\t\t\t\t\t   // 테이블의 특정 컬럼 데이터 출력\nSELECT [컬럼명] FROM [테이블명] WHERE [컬럼명]=&#39;값&#39;;\t\t    // 특정 값을 포함하는 행 출력\nSELECT [컬럼명] FROM [테이블명] LIMIT [숫자];\t\t\t\t // 출력 갯수 제한\nSELECT * FROM [테이블명] ORDER BY [컬럼명] DESC;\t\t\t  // 특정 컬럼을 기준으로 내림차순\n\nUPDATE [테이블명] SET [컬럼명1]=&#39;수정값&#39; WHERE [컬럼명2]=&#39;값&#39;; // 컬럼의 값을 새로운 값으로 수정\nDELETE FROM [테이블명] WHERE [칼럼명]=&#39;값&#39;\t\t\t\t\t // 특정 값을 가진 행 삭제</code></pre></div>\n<p><strong>주의!</strong>  UPDATE나 DELETE를 할 때는 <strong>WHERE</strong>를 절대 절대 빠트려서는 안된다. 전체 데이터가 수정될 위험이 있다.</p>\n<h4>참고</h4>\n<p><a href=\"https://www.npmjs.com/package/mysql\">npm-mysql</a><br>\n<a href=\"https://dev.mysql.com/doc/\">MySQL DOCUMENTATION</a><br>\n<a href=\"https://blog.sqreen.com/preventing-sql-injection-in-node-js-and-other-vulnerabilities/\">Preventing SQL injection in Node.js (and other vulnerabilities)</a></p>","frontmatter":{"title":"[Docs] Node.js + MySQL","date":"May 07, 2021","description":null}},"previous":{"fields":{"slug":"/tutorials/passport.js/"},"frontmatter":{"title":"[Docs] Passport.js"}},"next":{"fields":{"slug":"/TIL/OAuth2.0/"},"frontmatter":{"title":"[TIL] 구글 계정으로 로그인하기(OAuth 2.0)"}}},"pageContext":{"id":"9e700b70-7527-5bc8-926e-1a1188e04f48","previousPostId":"9dc9d4d4-dd01-52b8-9886-81f9fdd78965","nextPostId":"09a374cc-1596-513f-97b3-3ab58e7d358e"}},"staticQueryHashes":["2841359383","3257411868"]}