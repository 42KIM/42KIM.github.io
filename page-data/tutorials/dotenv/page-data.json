{"componentChunkName":"component---src-templates-blog-post-js","path":"/tutorials/dotenv/","result":{"data":{"site":{"siteMetadata":{"title":"42Log"}},"markdownRemark":{"id":"001a5531-75b5-54c2-9014-04f34d770855","excerpt":"는  파일에 설정한 key와 value를 에 할당해주는 모듈이다. 즉 원하는 변수와 값을 환경 변수로 사용할 수 있도록 대신 설정해주는 것이다. 프로젝트에서 서버와 DB를 연결할 때의 옵션(host, port, user, password…","html":"<p><code class=\"language-text\">Dotenv</code>는 <code class=\"language-text\">.env</code> 파일에 설정한 key와 value를 <code class=\"language-text\">process.env</code>에 할당해주는 모듈이다. 즉 원하는 변수와 값을 환경 변수로 사용할 수 있도록 대신 설정해주는 것이다. 프로젝트에서 서버와 DB를 연결할 때의 옵션(host, port, user, password 등)을 코드에 노출시키지 않기 위해 환경 변수로 관리했다.</p>\n<blockquote>\n<p><strong>🚨주의🚨</strong><br>\n.env 파일을 버전 관리 시스템에 공유하지 않도록 조심해야 한다. 환경 변수로 등록하더라도 .env 파일을 <code class=\"language-text\">gitignore</code> 시키지 않으면 의미가 없다.</p>\n</blockquote>\n<p>Dotenv는 환경 설정에 있어서 <code class=\"language-text\">The Twelv-Factor App</code>라는 앱 개발 방법론에 기반한다. Twelve-Factor는 <code class=\"language-text\">config</code>를 코드에서 엄격하게 분리하여 환경 변수에 저장하는 것을 지향하는데, 보다 자세한 내용은 <a href=\"https://12factor.net/config\">12factor.net</a>에서 확인할 수 있다.</p>\n<h3>Dotenv 사용법</h3>\n<p>먼저 .env 파일에 환경 변수로 사용할 변수와 값을 입력한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// .env\nDB_USER = abcd\nDB_PASSWORD = 12345</code></pre></div>\n<p>dotenv를 가능한 상단에서 require 한다. 그렇지 않으면 .env 파일에 입력한 내용이 dotenv에 의해 process.env에 로드되기 전에 접근하여 undefined를 반환할 위험이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">config</code> 는 .env 파일을 읽어 내용을 parse 한 뒤, process.env에 변수와 값을 할당하고 parse 된 key들이 담긴 객체를 반환한다. (오류가 발생하면 <code class=\"language-text\">error</code> 키를 반환한다.) </p>\n<h4>Options</h4>\n<p>dotenv를 config 할 때 option을 함께 전달할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/.env 파일 경로'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>환경 변수를 담은 .env 파일이 위치한 경로를 지정할 수 있다. 생략 시, 디폴트 경로는 <code class=\"language-text\">process.cwd()</code> 즉, 현재 Node.js 프로세스의 루트 디렉토리이다.</p>\n<p>Path 외에도 <code class=\"language-text\">Encoding</code> 옵션(디폴트 utf8)을 변경하거나,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> encoding<span class=\"token operator\">:</span> <span class=\"token string\">'latin1'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">Debug</code> 옵션(디폴트 false)을 변경하여 logging을 활성화 시킬 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dotenv'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> debug<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DEBUG</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>Parse Rules</h4>\n<p>파싱 엔진은 .env 파일에 key - value 쌍으로 구성된 String 또는 Buffer를 파싱하여 객체를 반환한다. </p>\n<p>.env 파일에 작성한 환경 변수의 파싱 규칙은 다음과 같다.</p>\n<ul>\n<li><code class=\"language-text\">KEY=value</code>를 <code class=\"language-text\">{KEY: &#39;value&#39;}</code>로 반환한다.</li>\n<li>공백 라인은 무시한다.</li>\n<li><code class=\"language-text\">#</code>로 시작하는 라인은 주석으로 처리한다.</li>\n<li>\n<p>inner quotes는 유지된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json=\"><pre class=\"language-json=\"><code class=\"language-json=\">JSON={&quot;KEY&quot;: &quot;value&quot;} 👉👉👉 {JSON: &quot;{\\&quot;KEY\\&quot;: \\&quot;value\\&quot;}&quot;</code></pre></div>\n</li>\n<li>\n<p>quote 되지 않은 값의 양끝 공백은 제거된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">KEY= some value 👉👉👉 {KEY: &#39;some value&#39;}</code></pre></div>\n</li>\n<li>\n<p>value의 quote는 escape 된다. (single, double 모두)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">KEY=&#39;value&#39;, KEY=&quot;value&quot; 👉👉👉 {KEY: &quot;value&quot;}</code></pre></div>\n</li>\n<li>\n<p>quote 된 value의 양끝 공백은 유지된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">KEY=&quot; some value &quot; 👉👉👉 {KEY: &#39; some value &#39;}</code></pre></div>\n</li>\n<li>\n<p>double quote 된 value는 줄바꿈이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">KEY=&quot;new\\nline&quot; 👉👉👉 {KEY: &#39;new\n\t\t\t\t\t\tline&#39;}</code></pre></div>\n</li>\n</ul>\n<h4>참고</h4>\n<p><a href=\"https://www.npmjs.com/package/dotenv\">npm dotenv</a>  </p>","frontmatter":{"title":"[Docs] Dotenv, 환경 변수","date":"June 17, 2021","description":null}},"previous":{"fields":{"slug":"/tutorials/helmet/"},"frontmatter":{"title":"[Docs] Helmet 모듈"}},"next":{"fields":{"slug":"/TIL/js_addeventlistener/"},"frontmatter":{"title":"[JS] addEventListener의 이벤트 핸들러와 this"}}},"pageContext":{"id":"001a5531-75b5-54c2-9014-04f34d770855","previousPostId":"cbc8c7a6-5ffe-5daf-8951-38acfa7bbaeb","nextPostId":"ed812e78-20bc-5c2b-a71d-c8ff4bc55063"}},"staticQueryHashes":["2841359383","3257411868"]}