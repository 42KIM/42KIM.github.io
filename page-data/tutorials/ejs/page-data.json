{"componentChunkName":"component---src-templates-blog-post-js","path":"/tutorials/ejs/","result":{"data":{"site":{"siteMetadata":{"title":"42Log"}},"markdownRemark":{"id":"f3ca6845-90ce-5126-a439-078a39c5cac2","excerpt":"0. 프로젝트의 서버가 얼추 갖춰졌다. 동적 페이지 생성을 위해 템플릿 엔진을 사용하기로 했다. EJS (Embedded JavaScript templating)는 순수 자바스크립트를 사용하여 HTML 마크업을 생성해주는 템플릿 언어이다.  먼저 npm을 통해 ejs…","html":"<h3>0.</h3>\n<p>프로젝트의 서버가 얼추 갖춰졌다. 동적 페이지 생성을 위해 템플릿 엔진을 사용하기로 했다.</p>\n<p>EJS (Embedded JavaScript templating)는 순수 자바스크립트를 사용하여 HTML 마크업을 생성해주는 템플릿 언어이다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">$ npm install ejs</code></pre></div>\n<p>먼저 npm을 통해 ejs를 설치하고 express에서 ejs를 require 했다면, <code class=\"language-text\">app.set()</code>을 사용해</p>\n<ul>\n<li><code class=\"language-text\">view engine</code>으로 사용할 템플릿 엔진 (ejs)</li>\n</ul>\n<p>을 세팅해줘야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> ejs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ejs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'view engine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ejs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>.<code class=\"language-text\">render(&#39;view&#39;, [locals], callback)</code> 메서드를 사용하여 브라우저에 렌더링할 HTML 파일을 응답한다. 이때, view.ejs 파일에 전달할 변수를 options 객체에 담아 전달할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.ejs의 변수 isLogin에 true 값을 전달</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>isLogin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>1.</h3>\n<p>HTML에서 자바스크립트를 사용하기 위해 ejs는 고유의 태그를 사용한다. 자바스크립트의 문법적 의미와 무관하게 자바스크립트가 사용되는 라인을 <code class=\"language-text\">&lt;% &#39;javascript&#39; %&gt;</code> 로 감싸준다. Default 구분 문자는 <code class=\"language-text\">%</code> 인데 <code class=\"language-text\">{delimiter: ?}</code> 객체를 render 메서드의 옵션에 담아 바꿔줄 수도 있다. 혹은 <code class=\"language-text\">ejs.delimiter = &#39;?&#39;</code> 를 통해 전역에서 구분 문자를 바꿀 수 있다.  </p>\n<p>주요 ejs 태그의 사용법은 아래와 같다.</p>\n<ul>\n<li><code class=\"language-text\">&lt;%</code> ‘Scriptlet’ tag, for control-flow, no output</li>\n<li><code class=\"language-text\">&lt;%_</code> ‘Whitespace Slurping’ Scriptlet tag, strips all whitespace before it</li>\n<li><code class=\"language-text\">&lt;%=</code> Outputs the value into the template (HTML escaped)</li>\n<li><code class=\"language-text\">&lt;%-</code> Outputs the unescaped value into the template</li>\n<li><code class=\"language-text\">&lt;%#</code> Comment tag, no execution, no output</li>\n<li><code class=\"language-text\">&lt;%%</code> Outputs a literal ’&#x3C;%’</li>\n<li><code class=\"language-text\">%&gt;</code> Plain ending tag</li>\n<li><code class=\"language-text\">-%&gt;</code> Trim-mode (‘newline slurp’) tag, trims following newline</li>\n<li>\n<p><code class=\"language-text\">_%&gt;</code> ‘Whitespace Slurping’ ending tag, removes all whitespace after it</p>\n<p><em>출처: <a href=\"https://ejs.co/#docs\">EJS Docs</a></em></p>\n</li>\n</ul>\n<h3>2.</h3>\n<p>ejs 파일로 다른 파일의 코드를 불러오기 위해서는 <code class=\"language-text\">include</code> 를 사용한다. 중복 HTML escaping을 피하기 위해 <code class=\"language-text\">&lt;%-</code> 태그를 사용해준다. include의 첫 번째 인자로는 불러올 파일이 위치한 경로, 두 번째 인자로는 options를 전달한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ejs\"><pre class=\"language-ejs\"><code class=\"language-ejs\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token ejs language-ejs\"><span class=\"token delimiter punctuation\">&lt;%</span><span class=\"token language-javascript\"> list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">listName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       <span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span><span class=\"token operator\">-</span> <span class=\"token function\">include</span><span class=\"token punctuation\">(</span>'list<span class=\"token operator\">/</span>names<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>listName<span class=\"token operator\">:</span> name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token delimiter punctuation\">%></span></span>\n    <span class=\"token ejs language-ejs\"><span class=\"token delimiter punctuation\">&lt;%</span><span class=\"token language-javascript\"> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token delimiter punctuation\">%></span></span>&lt;/%>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3>3.</h3>\n<p>기존 HTML 태그를 그대로 사용하면서 몇 몇 특수 문자만 추가한다는 점에서는 익숙하게 사용할 수 있다는 장점이 있을 것 같으나, 실수도 꽤 발생하고 가독성이 은근히 떨어지는 것 같기도 하다. 다음 기회에는 또 다른 템플릿 엔진인 <code class=\"language-text\">pug</code>를 사용해보고 싶다. 이름도 더 귀엽다.</p>\n<h4>참고</h4>\n<p><a href=\"https://ejs.co/\">EJS</a>  </p>","frontmatter":{"title":"[Docs] EJS 초간단 사용법","date":"May 17, 2021","description":null}},"previous":{"fields":{"slug":"/TIL/OAuth2.0/"},"frontmatter":{"title":"[TIL] 구글 계정으로 로그인하기(OAuth 2.0)"}},"next":{"fields":{"slug":"/algorithm/섬나라 아일랜드 찾기/"},"frontmatter":{"title":"[알고리즘] 섬 찾기 문제"}}},"pageContext":{"id":"f3ca6845-90ce-5126-a439-078a39c5cac2","previousPostId":"09a374cc-1596-513f-97b3-3ab58e7d358e","nextPostId":"3ada3d21-39d0-5920-a358-85e38dc70d9e"}},"staticQueryHashes":["2841359383","3257411868"]}