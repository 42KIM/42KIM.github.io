{"componentChunkName":"component---src-templates-blog-post-js","path":"/tutorials/passport.js/","result":{"data":{"site":{"siteMetadata":{"title":"42Log"}},"markdownRemark":{"id":"9dc9d4d4-dd01-52b8-9886-81f9fdd78965","excerpt":"는 ‘인증(authentication)‘이라는 단일 목적을 위해 고안된 Node middleware이다. 모던 웹 애플리케이션에는 다양한 형태의 인증 방식이 존재한다. Passport…","html":"<p><code class=\"language-text\">Passport</code>는 ‘인증(authentication)‘이라는 단일 목적을 위해 고안된 Node middleware이다. 모던 웹 애플리케이션에는 다양한 형태의 인증 방식이 존재한다. Passport는 각 애플리케이션의 목적에 맞게, 다양한 <code class=\"language-text\">Strategy</code>라는 인증 메커니즘을 모듈로 패키지화 해놓았다. 덕분에 우리는 만들고자하는 애플리케이션에 맞는 strategy를 골라 사용할 수 있게 된 것이다. 한마디로, Passport는 웹 애플리케이션을 만드는 과정에서 사용자 인증을 간편하게 구현할 수 있도록 돕는 미들웨어인 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">$ npm install passport</code></pre></div>\n<p>역시나 npm을 사용해 passport를 설치하는 것으로 시작한다.</p>\n<h3>Authenticate</h3>\n<p>본격적으로 인증은 <code class=\"language-text\">passport.authenticate()</code>함수를 호출하고, 어떤 strategy를 사용할 것인지 명시하는 것으로 시작한다. 아래 예시 코드는 <code class=\"language-text\">local</code> strategy를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span>\n  passport<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'local'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// If this function gets called, authentication was successful.</span>\n    <span class=\"token comment\">// `req.user` contains the authenticated user.</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users/'</span> <span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>디폴트 값으로, 인증에 실패할 경우 Passport는 <code class=\"language-text\">401 Unauthorized</code> 상태 코드로 응답하고 다른 라우트 핸들러의 발동이 중지될 것이다. 인증에 성공한 경우, 다음 라우트 핸들러가 발동되며 인증된 사용자에게는 <code class=\"language-text\">req.user</code> 프로퍼티가 세팅된다.</p>\n<h3>Redirect &#x26; Flash Messages</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span>\n  passport<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'local'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> successRedirect<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n                                   failureRedirect<span class=\"token operator\">:</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span>\n                                   failureFlash<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>사용자 요청의 인증 후에는 Redirect가 일반적으로 수행된다. 또한 <code class=\"language-text\">failureFlash: true</code> 옵션을 추가하여 인증에 실패할 경우, Passport가 왜 인증에 실패했는지에 관한 에러 메시지를 보내도록 설정할 수도 있다. 원한다면 true의 위치에 직접 에러 메시지를 작성하여 담는 것도 가능하다. </p>\n<p>공식 문서에 따르면 <strong>Flash Message 기능을 사용하기 위한 <code class=\"language-text\">req.flash()</code>함수가 이전에는 내장 함수로 제공되었으나, Express 3.x 버전에서 제거되었다고 한다. 최신 버전에서는 <a href=\"https://github.com/jaredhanson/connect-flash\">이 미들웨어</a>를 사용하여 대체할 수 있다고 한다.</strong></p>\n<h3>Disable Sessions</h3>\n<p>인증에 성공하면 Passport는, 사용자의 편의를 위해 브라우저를 종료해도 소멸되지 않는 <code class=\"language-text\">Persistent login session</code>을 생성한다. 그러나 강화된 보안을 위해 세션을 비활성화 하고 싶다면 <code class=\"language-text\">session</code> 옵션을 <code class=\"language-text\">false</code>로 설정하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">passport<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'basic'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> session<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span></code></pre></div>\n<h3>Configure</h3>\n<p>Passport를 사용하기 위해서는 세 가지 환경 설정이 필요하다.</p>\n<ol>\n<li><strong>Strategies</strong></li>\n</ol>\n<p>Passport는 일반적인 ID/PASSWORD를 식별 방식, OAuth 같은 위임 인증 방식이나 OpenID 같은 다양한 인증 방식을 아우르는 용어로 <code class=\"language-text\">strategies</code>를 사용한다. </p>\n<p>Passport가 사용자 request를 인증하기 전에 <strong>반드시</strong> 애플리케이션에는 어떤 strategy를 사용할 것인지 설정이 되어 있어야 한다. 설정하는 방법은 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> passport <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'passport'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">,</span> LocalStrategy <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'passport-local'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Strategy<span class=\"token punctuation\">;</span>\n\npassport<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LocalStrategy</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'Incorrect username.'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">validPassword</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'Incorrect password.'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Strategies</code>를 사용함에 있어서 한 가지 중요한 개념이 있다. 그것은 바로 <strong>Verify Callback</strong>이다. Verify Callback은 유저의 <code class=\"language-text\">credential</code>을 판별하기 위한 목적으로 사용된다.</p>\n<p>Passport는 request를 인증할 때, request 안에 포함된 credential들을 parse한다. 이 과정에서 credential(ID와 비밀번호 등)을 인수로 사용하여 verify callback을 호출한다. 그리고 그 정보가 유효한 것이 인증되면 verify callback 은 <code class=\"language-text\">done()</code>함수를 호출하여 인증된 <code class=\"language-text\">user</code>를 Passport에 전달한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">return</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>만약 credential 정보가 유효하지 않는 경우, done()의 인자로 user 대신 <code class=\"language-text\">false</code>가 전달되어 호출되어야 한다. 이때, 인증 실패의 원인을 설명하는 메시지를 옵션으로 함께 전달할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">return</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'Incorrect password.'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>마지막으로 credential 검증 과정에서 예외적인 <em>서버측 오류</em> 가 발생하는 경우(데이터베이스 사용 불가 상태 등등), done() 함수는 error를 호출해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">return</span> <span class=\"token function\">done</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"2\">\n<li><strong>Middleware</strong></li>\n</ol>\n<p>Passport를 시작하기 위해서는 <code class=\"language-text\">passport.initialize()</code> 미들웨어가 필요하다.</p>","frontmatter":{"title":"[Docs] Passport.js","date":"May 05, 2021","description":null}},"previous":{"fields":{"slug":"/TIL/js_function/"},"frontmatter":{"title":"[TIL] Function"}},"next":{"fields":{"slug":"/tutorials/Node.js+MySQL/"},"frontmatter":{"title":"[Docs] Node.js + MySQL"}}},"pageContext":{"id":"9dc9d4d4-dd01-52b8-9886-81f9fdd78965","previousPostId":"3d7298b6-290a-59af-a24a-4e9fc3a00de1","nextPostId":"9e700b70-7527-5bc8-926e-1a1188e04f48"}},"staticQueryHashes":["2841359383","3257411868"]}